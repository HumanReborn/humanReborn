<?php

namespace EIP\HRBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * HRQuestGameLinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HRQuestGameLinkRepository extends EntityRepository
{
    /**
     * \brief Returns a list of the available quests
     * @return HRQuestSchema[]
     */
    public function getAvailableQuests(HRGame $game, $currentQuests = array(), $completedQuests = array()) {
        $exclude = array(0); // 0 , -> 'NOT IN ()' would trigger an error
        foreach (array($currentQuests, $completedQuests) as $arr) {
            foreach ($arr as $q) {
                $exclude[] = $q->getSchema()->getId();
            }
        }
        return $this->_em->createQuery("
                    SELECT qs
                    FROM EIPHRBundle:HRQuestSchema qs
                    WHERE qs.id IN (
                        SELECT qs2.id
                        FROM EIPHRBundle:HRQuestGameLink ql
                        JOIN ql.questSchema qs2
                        WHERE ql.game = :gameid
                    )
                    AND qs.id NOT IN (:exclude)
                    ")
                ->setParameters(array(
                    ':gameid' => $game->getId(),
                    ':exclude' => $exclude
                ))
                ->getResult();
    }

    /**
     * \brief Returns true if the questschema is available for a game and a user
     * @param \EIP\HRBundle\Entity\HRSchema $schema
     * @param \EIP\HRBundle\Entity\HRGame $game
     * @param \EIP\HRBundle\Entity\HRUser $user
     * @return boolean
     */
    public function isQuestAvailable(HRQuestSchema $schema, HRGame $game, HRUser $user) {
        try
        {
            $r1 = $this->_em->createQuery("
                SELECT COUNT(q.id)
                FROM EIPHRBundle:HRQuest q
                JOIN q.schema qs
                WHERE q.user = :userid
                AND q.game = :gameid
                and q.schema = :schemaid
                ")
                    ->setParameters(array(
                        ':userid' => $user->getId(),
                        ':gameid' => $game->getId(),
                        ':schemaid' => $schema->getId()
                    ))
                    ->getSingleScalarResult();
            if ($r1 != 0)
                return false;

            $r2 = $this->_em->createQuery("
                SELECT ql
                FROM EIPHRBundle:HRQuestGameLink ql
                WHERE ql.questSchema = :schemaid
                AND ql.game = :gameid
            ")
                ->setParameters(array(
                    ':schemaid' => $schema->getId(),
                    ':gameid' => $game->getId()
                ))
                ->getSingleResult();
            return true;
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return false;
        }
    }
}
